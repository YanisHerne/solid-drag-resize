// eslint.config.js
import eslintPluginTypeScript from "@typescript-eslint/eslint-plugin";
import typescriptParser from "@typescript-eslint/parser";
import eslintPluginSolid from "eslint-plugin-solid";
import eslintConfigPrettier from "eslint-config-prettier";

export default [
    {
        // Define the files to lint. You might adjust this based on your project structure.
        files: ["**/*.{js,jsx,ts,tsx}"],
        // Ignore common build and configuration files.
        ignores: [
            "**/node_modules/*",
            "**/dist/*",
            "**/examples/dist/assets/*",
            "**/examples/*",
            "**/build/*",
            "**/coverage/*",
            "**/*.cjs", // CommonJS files generated by build tools
            "**/*.mjs", // ES Modules files generated by build tools
            "*.config.{js,ts,mjs}", // Top-level config files (e.g., vite.config.ts)
            ".prettierrc",
            "**/test/*",
        ],
        languageOptions: {
            parser: typescriptParser,
            parserOptions: {
                // Essential for TypeScript parsing. Point to your tsconfig.json.
                project: "./tsconfig.json",
                // ECMAScript version. Adjust if targeting older environments.
                ecmaVersion: "latest",
                // Source type for modules.
                sourceType: "module",
                ecmaFeatures: {
                    // Enable JSX for Solid.
                    jsx: true,
                },
            },
        },
        plugins: {
            "@typescript-eslint": eslintPluginTypeScript,
            solid: eslintPluginSolid,
        },
        rules: {

            // TypeScript ESLint recommended rules
            ...eslintPluginTypeScript.configs["eslint-recommended"].rules, // Disable base ESLint rules that TypeScript ESLint handles
            ...eslintPluginTypeScript.configs["recommended"].rules,
            ...eslintPluginTypeScript.configs["recommended-requiring-type-checking"] .rules,

            // SolidJS specific rules
            ...eslintPluginSolid.configs.recommended.rules,

            // --- Custom/Override Rules ---

            // Enable strict equality (===) by default.
            eqeqeq: ["error", "always"],

            // Disallow unused variables. Adjust to your preference.
            "no-unused-vars": "off", // Disable base rule, use TS one
            "@typescript-eslint/no-unused-vars": [
                "warn",
                {
                    argsIgnorePattern: "^_", // Ignore variables starting with underscore
                    varsIgnorePattern: "^_",
                    caughtErrorsIgnorePattern: "^_",
                },
            ],

            // Enforce consistent type imports.
            //"@typescript-eslint/consistent-type-imports": [
            //  "error",
            //  { prefer: "type-imports", disallowTypeAnnotations: false },
            //],

            // SolidJS specific overrides/additions
            "solid/jsx-no-undef": "error", // Ensure JSX components are defined
            "solid/reactivity": "warn", // Warn about potential reactivity issues
            "solid/no-innerhtml": "error", // Disallow dangerouslySetInnerHTML
            "solid/prefer-for": "error", // Prefer `<For>` over `map` in JSX

            // AVOID using `any` type, unless explicitly necessary.
            "@typescript-eslint/no-explicit-any": "warn",

            // Prevent `require` statements. Prefer ES Modules.
            "@typescript-eslint/no-var-requires": "error",

            // Disallow empty functions, useful for explicit no-op.
            "@typescript-eslint/no-empty-function": "off",

            // Enforce default clauses in switch statements to be last.
            "default-case-last": "error",

            // Require curly braces for all control statements.
            curly: "error",

            // No unnecessary curly braces in template literals.
            "no-template-curly-in-string": "warn",

            // Allow console.warn and console.error, disallow others.
            "no-console": ["warn", { allow: ["warn", "error"] }],
        },
    },
    // This must be the last configuration in the array to ensure it overrides all
    // conflicting rules that Prettier would handle.
    eslintConfigPrettier,
];
